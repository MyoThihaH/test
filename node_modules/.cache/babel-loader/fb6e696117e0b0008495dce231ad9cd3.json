{"ast":null,"code":"import { createAsyncThunk, createEntityAdapter, createSelector, createSlice } from \"@reduxjs/toolkit\";\nimport { fetchPost, postData, deleteData, updateData, allComplete, allUnComplete, clearComplete } from \"../../api/api\";\nexport const generateId = state => {\n  const arr = state.todos.ids;\n  return arr.length - 1 >= 0 ? arr[arr.length - 1] + 1 : 0;\n};\nexport const fetchTodos = createAsyncThunk('todo/fetchTodos', async () => {\n  const data = await fetchPost();\n  return data;\n});\nexport const todoAdd = createAsyncThunk('todo/todoAdd', async text => {\n  const data = await postData({\n    description: text\n  });\n  return data;\n});\nexport const todoDelete = createAsyncThunk('todo/todoDelete', async id => {\n  await deleteData({\n    _id: id\n  });\n  return id;\n});\nexport const todoComplete = createAsyncThunk('todo/todoComplete', async datas => {\n  await updateData({\n    _id: datas._id,\n    completed: datas.changes.completed\n  });\n  return {\n    id: datas._id,\n    changes: {\n      completed: datas.changes.completed\n    }\n  };\n});\nexport const todoAllComplete = createAsyncThunk('todo/todoAllComplete', async () => {\n  const data = await allComplete();\n  return data;\n});\nexport const todoAllUnComplete = createAsyncThunk('todo/todoAllUnComplete', async () => {\n  const data = await allUnComplete();\n  return data;\n});\nexport const todoClearComplete = createAsyncThunk('todo/todoClearComplete', async () => {\n  const data = await clearComplete();\n  return data;\n});\nexport const todoSelect = createAsyncThunk('todo/todoSelect', async datas => {\n  await updateData({\n    _id: datas._id,\n    color: datas.changes.color\n  });\n  return {\n    id: datas._id,\n    changes: {\n      color: datas.changes.color\n    }\n  };\n});\nconst todoAdapter = createEntityAdapter({\n  selectId: data => data._id\n});\nconst initialState = todoAdapter.getInitialState({\n  open: false\n});\nconst todoSlice = createSlice({\n  name: 'todo',\n  initialState,\n  reducers: {\n    todoDeleteSnack: (state, action) => {\n      state.open = action.payload;\n    } // todoAdd: {\n    //     reducer: (state, action) => {\n    //          todoAdapter.addOne(state, action.payload)\n    //     },\n    //     prepare: (id, description) => {\n    //         return {payload:{id: id, complete: false, description: description, color: ''}}\n    //     }\n    // },\n    // todoComplete: (state, action) => {\n    //     todoAdapter.updateOne(state, action.payload)\n    // },\n    // todoDelete: (state, action) => {\n    //     todoAdapter.removeOne(state, action.payload)\n    // },\n    // todoAllComplete: (state, action) => {\n    //     const update_arr = state.ids.map((id) => {\n    //             return {id: id, changes: {complete: true}}\n    //         })\n    //     todoAdapter.updateMany(state, update_arr)\n    // },\n    // todoClearComplete: (state, action) => {\n    //     const completeTodoArray = Object.values(state.entities).filter((todo) => todo.complete);\n    //     const completeIds = completeTodoArray.map(todo => todo.id);\n    //     todoAdapter.removeMany(state, completeIds);\n    // },\n    // todoSelect: (state, action) => {\n    //     todoAdapter.updateOne(state, action.payload);\n    // },\n    // todoAllUnComplete: (state, action) => {\n    //     const update_arr = state.ids.map((id) => {\n    //         return {id: id, changes: {complete: false}}\n    //     })\n    //     todoAdapter.updateMany(state, update_arr)\n    // }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchTodos.fulfilled, todoAdapter.setAll).addCase(todoAdd.fulfilled, (state, action) => {\n      todoAdapter.addOne(state, action.payload);\n    }).addCase(todoDelete.fulfilled, (state, action) => {\n      state.open = true;\n      todoAdapter.removeOne(state, action.payload);\n    }).addCase(todoComplete.fulfilled, todoAdapter.updateOne).addCase(todoAllComplete.fulfilled, (state, action) => {\n      const update_arr = state.ids.map(id => {\n        return {\n          id: id,\n          changes: {\n            completed: true\n          }\n        };\n      });\n      todoAdapter.updateMany(state, update_arr);\n    }).addCase(todoAllUnComplete.fulfilled, (state, action) => {\n      const update_arr = state.ids.map(id => {\n        return {\n          id: id,\n          changes: {\n            completed: false\n          }\n        };\n      });\n      todoAdapter.updateMany(state, update_arr);\n    }).addCase(todoClearComplete.fulfilled, (state, action) => {\n      const completeTodoArray = Object.values(state.entities).filter(todo => todo.completed);\n      const completeIds = completeTodoArray.map(todo => todo._id);\n      todoAdapter.removeMany(state, completeIds);\n    }).addCase(todoSelect.fulfilled, todoAdapter.updateOne);\n  }\n});\nexport const {\n  todoDeleteSnack\n} = todoSlice.actions;\nexport default todoSlice.reducer;\nexport const {\n  selectAll,\n  selectById\n} = todoAdapter.getSelectors(state => state.todos);\nexport const selectFilterIds = createSelector(state => state, state => {\n  if (state.filters.status === \"All\" && state.filters.colors.length === 0) {\n    return selectTodoIds(state);\n  } else if (state.filters.status === \"UnComplete\") {\n    const arr = selectAll(state).filter(item => !item.completed && (state.filters.colors.length === 0 || state.filters.colors.includes(item.color)));\n    return arr.map(item => item._id);\n  } else if (state.filters.status === \"Complete\") {\n    const arr = selectAll(state).filter(item => item.completed && (state.filters.colors.length === 0 || state.filters.colors.includes(item.color)));\n    return arr.map(item => item._id);\n  } else {\n    const arr = selectAll(state).filter(item => state.filters.colors.includes(item.color));\n    return arr.map(item => item._id);\n  }\n});\nexport const selectTodoIds = createSelector(selectAll, state => state.map(item => item._id));\nexport const selectUnComplete = createSelector(selectAll, state => state.filter(state => !state.completed));\nexport const selectTodoDeleteSnack = createSelector(state => state.todos, state => state.open);","map":{"version":3,"sources":["/home/myo/Desktop/javascript/R_eact/memories_pj/client/src/features/Todo/todoSlice.js"],"names":["createAsyncThunk","createEntityAdapter","createSelector","createSlice","fetchPost","postData","deleteData","updateData","allComplete","allUnComplete","clearComplete","generateId","state","arr","todos","ids","length","fetchTodos","data","todoAdd","text","description","todoDelete","id","_id","todoComplete","datas","completed","changes","todoAllComplete","todoAllUnComplete","todoClearComplete","todoSelect","color","todoAdapter","selectId","initialState","getInitialState","open","todoSlice","name","reducers","todoDeleteSnack","action","payload","extraReducers","builder","addCase","fulfilled","setAll","addOne","removeOne","updateOne","update_arr","map","updateMany","completeTodoArray","Object","values","entities","filter","todo","completeIds","removeMany","actions","reducer","selectAll","selectById","getSelectors","selectFilterIds","filters","status","colors","selectTodoIds","item","includes","selectUnComplete","selectTodoDeleteSnack"],"mappings":"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","sourcesContent":["\nimport { createAsyncThunk, createEntityAdapter, createSelector, createSlice, } from \"@reduxjs/toolkit\";\nimport { fetchPost, postData, deleteData, updateData, allComplete, allUnComplete, clearComplete } from \"../../api/api\";\n\n\nexport const generateId = (state)=> {\n    const arr = state.todos.ids;\n    return arr.length-1>=0?arr[arr.length-1]+1:0\n    \n}\n\nexport const fetchTodos = createAsyncThunk('todo/fetchTodos', async () => {\n  const data =  await fetchPost();\n  return data;\n});\n\n\n\nexport const todoAdd = createAsyncThunk('todo/todoAdd', async (text) => {\n    \n    const data = await postData({description: text});\n    return data;\n\n});\n\nexport const todoDelete = createAsyncThunk('todo/todoDelete', async (id) => {\n    await deleteData({_id: id});\n    return id;\n});\n\nexport const todoComplete = createAsyncThunk('todo/todoComplete', async (datas) => {\n    await updateData({_id: datas._id, completed: datas.changes.completed});\n    return {id: datas._id, changes:{completed: datas.changes.completed}};\n    \n})\n\nexport const todoAllComplete = createAsyncThunk('todo/todoAllComplete',async () => {\n    const data = await allComplete();\n    return data;\n})\n\nexport const todoAllUnComplete = createAsyncThunk('todo/todoAllUnComplete',async () => {\n    const data = await allUnComplete();\n    return data;\n})\n\nexport const todoClearComplete = createAsyncThunk('todo/todoClearComplete', async () => {\n    const data = await clearComplete();\n    return data;\n})\n\nexport const todoSelect = createAsyncThunk('todo/todoSelect', async (datas) => {\n\n    \n    await updateData({_id:datas._id, color:datas.changes.color});\n    return {id:datas._id, changes:{color: datas.changes.color}}\n} )\n\nconst todoAdapter = createEntityAdapter({\n    selectId: (data) => data._id,\n   \n});\n\n\n\nconst initialState = todoAdapter.getInitialState({open:false});\n\nconst todoSlice = createSlice({\n    name: 'todo',\n    initialState,\n    reducers: {\n        todoDeleteSnack: (state, action) => {\n            state.open = action.payload;\n            \n        }\n        // todoAdd: {\n        //     reducer: (state, action) => {\n        //          todoAdapter.addOne(state, action.payload)\n        //     },\n        //     prepare: (id, description) => {\n        //         return {payload:{id: id, complete: false, description: description, color: ''}}\n               \n        //     }\n        // },\n        // todoComplete: (state, action) => {\n        //     todoAdapter.updateOne(state, action.payload)\n        // },\n        // todoDelete: (state, action) => {\n        //     todoAdapter.removeOne(state, action.payload)\n        // },\n        // todoAllComplete: (state, action) => {\n        //     const update_arr = state.ids.map((id) => {\n        //             return {id: id, changes: {complete: true}}\n        //         })\n        //     todoAdapter.updateMany(state, update_arr)\n        // },\n        // todoClearComplete: (state, action) => {\n        //     const completeTodoArray = Object.values(state.entities).filter((todo) => todo.complete);\n        //     const completeIds = completeTodoArray.map(todo => todo.id);\n        //     todoAdapter.removeMany(state, completeIds);\n        // },\n        // todoSelect: (state, action) => {\n        //     todoAdapter.updateOne(state, action.payload);\n\n        // },\n        // todoAllUnComplete: (state, action) => {\n        //     const update_arr = state.ids.map((id) => {\n        //         return {id: id, changes: {complete: false}}\n        //     })\n        //     todoAdapter.updateMany(state, update_arr)\n        // }\n        \n    },\n    extraReducers: (builder) => {\n        builder\n        .addCase(fetchTodos.fulfilled, todoAdapter.setAll)\n        .addCase(todoAdd.fulfilled, (state, action) => {\n            todoAdapter.addOne(state,action.payload)\n        })\n        .addCase(todoDelete.fulfilled, (state, action) => {\n            state.open = true;\n            todoAdapter.removeOne(state,action.payload);\n            \n        })\n        .addCase(todoComplete.fulfilled, todoAdapter.updateOne)\n        .addCase(todoAllComplete.fulfilled, (state, action) => {\n            const update_arr = state.ids.map((id) => {\n                return {id: id, changes: {completed: true}}\n            })\n            todoAdapter.updateMany(state, update_arr)\n        })\n        .addCase(todoAllUnComplete.fulfilled, (state, action) => {\n            const update_arr = state.ids.map((id) => {\n                return {id: id, changes: {completed: false}}\n            })\n            todoAdapter.updateMany(state, update_arr)\n        })\n        .addCase(todoClearComplete.fulfilled, (state, action) =>{\n            const completeTodoArray = Object.values(state.entities).filter((todo) => todo.completed);\n            const completeIds = completeTodoArray.map(todo => todo._id);\n            todoAdapter.removeMany(state, completeIds);\n        } )\n        .addCase(todoSelect.fulfilled, todoAdapter.updateOne)\n\n    }\n})\n\n\n\nexport const { todoDeleteSnack } = todoSlice.actions;\n\nexport default todoSlice.reducer;\n\n\nexport const { selectAll, selectById } = todoAdapter.getSelectors((state) => state.todos);\n\n\nexport const selectFilterIds = createSelector(\n    (state) => state,\n    (state) =>{\n        if(state.filters.status === \"All\" && state.filters.colors.length === 0) {\n            return selectTodoIds(state)\n        } else if(state.filters.status === \"UnComplete\"){\n           const arr = selectAll(state).filter((item) => !item.completed && (state.filters.colors.length=== 0 || state.filters.colors.includes(item.color)));\n           return arr.map((item) => item._id)\n        } else if(state.filters.status === \"Complete\"){\n           const arr = selectAll(state).filter((item) => item.completed && (state.filters.colors.length=== 0 || state.filters.colors.includes(item.color)));\n           return arr.map((item) => item._id)\n        } else {\n            const arr = selectAll(state).filter((item) => state.filters.colors.includes(item.color));\n            return arr.map((item) => item._id)\n        }\n    }\n)\n\nexport const selectTodoIds = createSelector(\n    selectAll,\n    (state) => state.map((item) => item._id)\n\n)\n\nexport const selectUnComplete = createSelector(\n    selectAll,\n    (state) => state.filter((state) => !state.completed)\n)\n\nexport const selectTodoDeleteSnack = createSelector(\n    (state) => state.todos,\n    state => state.open\n )"]},"metadata":{},"sourceType":"module"}