{"ast":null,"code":"import _slicedToArray from\"/home/myo/Desktop/javascript/R_eact/to_do_lists/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{render}from\"@testing-library/react\";import{useSelector,useDispatch}from\"react-redux\";import{useState}from\"react\";import{Grid,Typography}from'@mui/material';import Button from'@mui/material/Button';import Paper from'@mui/material/Paper';import Divider from'@mui/material/Divider';import{Todo}from\"./Todo\";import{selectTodoIds,selectFilterIds,todoAllComplete,todoClearComplete,todoAllUnComplete,selectTodoDeleteSnack,todoDeleteSnack}from\"./todoSlice\";import{SnackBar}from\"../../components/SnackBar\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var TodoList=function TodoList(){var todoIds=useSelector(selectFilterIds);var _useState=useState(\"Mark All\"),_useState2=_slicedToArray(_useState,2),text=_useState2[0],setText=_useState2[1];var dispatch=useDispatch();var openSnack=useSelector(selectTodoDeleteSnack);var handleAllCompleteClick=function handleAllCompleteClick(){if(text==\"Mark All\"){dispatch(todoAllComplete());setText(\"UnMark\");}else{dispatch(todoAllUnComplete());setText(\"Mark All\");}};var handleClearCompletedClick=function handleClearCompletedClick(){dispatch(todoClearComplete());};var renderTodos=function renderTodos(){return todoIds.map(function(id){return/*#__PURE__*/_jsx(Grid,{item:true,container:true,children:/*#__PURE__*/_jsx(Todo,{id:id},id)});});};return/*#__PURE__*/_jsx(Paper,{elevation:3,sx:{width:\"80%\",position:\"relative\",left:\"148px\",paddingTop:\"20px\",paddingBottom:\"20px\",margin:\"10px\",backgroundColor:\"#dff5e5\"},children:/*#__PURE__*/_jsxs(Grid,{container:true,direction:\"column\",rowSpacing:2,children:[/*#__PURE__*/_jsxs(Grid,{item:true,container:true,justifyContent:\"left\",paddingLeft:\"50px\",children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:1,lg:1,children:/*#__PURE__*/_jsx(Button,{variant:\"contained\",size:\"small\",onClick:handleAllCompleteClick,children:text})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:1,lg:2,children:/*#__PURE__*/_jsx(Button,{variant:\"contained\",size:\"small\",onClick:handleClearCompletedClick,children:\"Clear Completed\"})})]}),renderTodos(),/*#__PURE__*/_jsx(SnackBar,{color:\"black\",message:\"Success Deleted Item\",open:useSelector(selectTodoDeleteSnack),autoHideDuration:4000,onClose:function onClose(){return dispatch(todoDeleteSnack(false));},backgroundColor:\"green\"})]})});};","map":{"version":3,"sources":["/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/features/Todo/TodoList.js"],"names":["render","useSelector","useDispatch","useState","Grid","Typography","Button","Paper","Divider","Todo","selectTodoIds","selectFilterIds","todoAllComplete","todoClearComplete","todoAllUnComplete","selectTodoDeleteSnack","todoDeleteSnack","SnackBar","TodoList","todoIds","text","setText","dispatch","openSnack","handleAllCompleteClick","handleClearCompletedClick","renderTodos","map","id","width","position","left","paddingTop","paddingBottom","margin","backgroundColor"],"mappings":"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","sourcesContent":["import { render } from \"@testing-library/react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useState } from \"react\";\nimport { Grid, Typography } from '@mui/material';\nimport Button from '@mui/material/Button';\nimport Paper from '@mui/material/Paper';\nimport Divider from '@mui/material/Divider';\n\nimport { Todo } from \"./Todo\";\nimport { selectTodoIds, selectFilterIds, todoAllComplete, todoClearComplete, todoAllUnComplete, selectTodoDeleteSnack, todoDeleteSnack } from \"./todoSlice\";\nimport { SnackBar } from \"../../components/SnackBar\";\n\nexport const TodoList = () => {\n   const todoIds = useSelector(selectFilterIds);\n\n   const [text, setText ] = useState(\"Mark All\");\n   const dispatch = useDispatch();\n   const openSnack = useSelector(selectTodoDeleteSnack);\n   const handleAllCompleteClick = () => {\n       if( text == \"Mark All\") {\n           dispatch(todoAllComplete());\n           setText(\"UnMark\")\n       } else {\n           dispatch(todoAllUnComplete());\n           setText(\"Mark All\")\n       }  \n   };\n\n   const handleClearCompletedClick = () => {\n       dispatch(todoClearComplete());\n   };\n\n\n   \n\n   const renderTodos = () => {\n    return todoIds.map(id => {\n       return (\n        <Grid item container >\n        <Todo id = {id} key = {id}/>\n        </Grid>\n       )\n    })\n   };\n   \n \n\n        return (\n           \n                \n                <Paper elevation={3} sx={{width:\"80%\", position:\"relative\", left:\"148px\", paddingTop:\"20px\",paddingBottom:\"20px\",margin:\"10px\",backgroundColor:\"#dff5e5\"}}>\n                    <Grid container direction='column' rowSpacing={2} >\n                        \n                        <Grid item container  justifyContent=\"left\" paddingLeft=\"50px\">\n                            \n                            <Grid item xs={1} lg={1}>\n                                <Button variant=\"contained\" size='small' onClick={handleAllCompleteClick}>{text}</Button>\n                            </Grid>\n                            \n                            <Grid item xs={1} lg={2}>\n                                <Button variant=\"contained\" size='small' onClick={handleClearCompletedClick}>Clear Completed</Button>\n                            </Grid>\n                        </Grid>\n                        \n                       \n                            {renderTodos()}\n                            <SnackBar\n                                color=\"black\"\n                                message=\"Success Deleted Item\"\n                                open={useSelector(selectTodoDeleteSnack)}\n                                autoHideDuration={4000}\n                                onClose={() => dispatch(todoDeleteSnack(false))}\n                                backgroundColor=\"green\"\n                            />\n                        \n                        \n                        \n                    </Grid>\n                    \n                </Paper>\n            \n        )\n}"]},"metadata":{},"sourceType":"module"}