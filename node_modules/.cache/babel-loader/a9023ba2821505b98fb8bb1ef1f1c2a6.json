{"ast":null,"code":"import _slicedToArray from\"/home/myo/Desktop/javascript/R_eact/to_do_lists/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState}from\"react\";import{useDispatch,useSelector}from\"react-redux\";import{Grid,Typography}from'@mui/material';import TextField from'@mui/material/TextField';import{makeStyles}from\"@mui/styles\";import{generateId,selectById}from\"../Todo/todoSlice\";import{todoAdd}from\"../Todo/todoSlice\";import{Footer}from\"../Footer/footer\";import{posturl}from\"../../api/api\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var useStyle=makeStyles({root:{position:\"relative\",left:\"158px\"},textField:{width:\"50%\"},typo:{position:\"relative\",left:\"400px\"}});export var Header=function Header(){var classes=useStyle();var dispatch=useDispatch();var _useState=useState(''),_useState2=_slicedToArray(_useState,2),text=_useState2[0],setText=_useState2[1];var id=useSelector(generateId);var changeHandler=function changeHandler(e){setText(e.target.value);};// const handleRemoveCompletedClick = () => {\n//   dispatch(todoClearComplete());\n// }\n// const handleAllCompleteClick = () => {\n//   dispatch(todoAllComplete())\n// }\nvar handleKeyDown=function handleKeyDown(e){// If the user pressed the Enter key:\nvar trimmedText=text.trim();if(e.which===13&&trimmedText){// Dispatch add action creator function \ndispatch(todoAdd(text));// And clear out the text input\nsetText('');}};return/*#__PURE__*/_jsxs(\"div\",{className:classes.root,children:[/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(Typography,{className:classes.typo,variant:\"h3\",color:\"#1376bd\",children:\"To Do Lists\"}),/*#__PURE__*/_jsx(TextField,{className:classes.textField,id:\"standard-basic\",label:\"Please enter you want to do...\",variant:\"standard\",value:text,onChange:changeHandler,onKeyDown:handleKeyDown}),/*#__PURE__*/_jsx(Typography,{style:{overflowWrap:'break-word',width:\"50%\"},children:text})]});};","map":{"version":3,"sources":["/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/features/Header/Header.js"],"names":["useState","useDispatch","useSelector","Grid","Typography","TextField","makeStyles","generateId","selectById","todoAdd","Footer","posturl","useStyle","root","position","left","textField","width","typo","Header","classes","dispatch","text","setText","id","changeHandler","e","target","value","handleKeyDown","trimmedText","trim","which","overflowWrap"],"mappings":"4IAAA,OAASA,QAAT,KAAyB,OAAzB,CACA,OAASC,WAAT,CAAqBC,WAArB,KAAwC,aAAxC,CACA,OAASC,IAAT,CAAeC,UAAf,KAAiC,eAAjC,CACA,MAAOC,CAAAA,SAAP,KAAsB,yBAAtB,CACA,OAASC,UAAT,KAA2B,aAA3B,CAEA,OAASC,UAAT,CAAqBC,UAArB,KAAuC,mBAAvC,CACA,OAASC,OAAT,KAAwB,mBAAxB,CACA,OAASC,MAAT,KAAuB,kBAAvB,CACA,OAASC,OAAT,KAAwB,eAAxB,C,wFAEA,GAAMC,CAAAA,QAAQ,CAAGN,UAAU,CAAC,CAC1BO,IAAI,CAAE,CACJC,QAAQ,CAAC,UADL,CAEJC,IAAI,CAAC,OAFD,CADoB,CAK1BC,SAAS,CAAE,CACTC,KAAK,CAAC,KADG,CALe,CAQ1BC,IAAI,CAAE,CACJJ,QAAQ,CAAE,UADN,CAEJC,IAAI,CAAE,OAFF,CARoB,CAAD,CAA3B,CAcA,MAAO,IAAMI,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,EAAM,CACxB,GAAMC,CAAAA,OAAO,CAAGR,QAAQ,EAAxB,CACA,GAAMS,CAAAA,QAAQ,CAAGpB,WAAW,EAA5B,CAEA,cAAwBD,QAAQ,CAAC,EAAD,CAAhC,wCAAOsB,IAAP,eAAaC,OAAb,eACA,GAAMC,CAAAA,EAAE,CAAGtB,WAAW,CAACK,UAAD,CAAtB,CAMA,GAAMkB,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,CAAD,CAAO,CACzBH,OAAO,CAACG,CAAC,CAACC,MAAF,CAASC,KAAV,CAAP,CACH,CAFD,CAIA;AACA;AACA;AAOA;AACA;AACA;AAMA,GAAMC,CAAAA,aAAa,CAAI,QAAjBA,CAAAA,aAAiB,CAACH,CAAD,CAAO,CAC1B;AACA,GAAMI,CAAAA,WAAW,CAAGR,IAAI,CAACS,IAAL,EAApB,CACA,GAAIL,CAAC,CAACM,KAAF,GAAY,EAAZ,EAAkBF,WAAtB,CAAmC,CACjC;AACAT,QAAQ,CAACZ,OAAO,CAACa,IAAD,CAAR,CAAR,CACA;AACAC,OAAO,CAAC,EAAD,CAAP,CAED,CACF,CAVH,CAcA,mBACA,aAAK,SAAS,CAAEH,OAAO,CAACP,IAAxB,wBACI,aADJ,cAEI,KAAC,UAAD,EAAY,SAAS,CAAEO,OAAO,CAACF,IAA/B,CAAqC,OAAO,CAAC,IAA7C,CAAkD,KAAK,CAAC,SAAxD,yBAFJ,cAII,KAAC,SAAD,EAAW,SAAS,CAAEE,OAAO,CAACJ,SAA9B,CAAyC,EAAE,CAAC,gBAA5C,CAA6D,KAAK,CAAC,gCAAnE,CAAoG,OAAO,CAAC,UAA5G,CAAuH,KAAK,CAAEM,IAA9H,CAAoI,QAAQ,CAAEG,aAA9I,CAA6J,SAAS,CAAEI,aAAxK,EAJJ,cAOI,KAAC,UAAD,EAAY,KAAK,CAAE,CAACI,YAAY,CAAE,YAAf,CAA6BhB,KAAK,CAAC,KAAnC,CAAnB,UAA+DK,IAA/D,EAPJ,GADA,CAaH,CA3DM","sourcesContent":["import { useState } from \"react\";\nimport { useDispatch,useSelector } from \"react-redux\";\nimport { Grid, Typography } from '@mui/material';\nimport TextField from '@mui/material/TextField';\nimport { makeStyles } from \"@mui/styles\";\n\nimport { generateId, selectById } from \"../Todo/todoSlice\";\nimport { todoAdd } from \"../Todo/todoSlice\";\nimport { Footer } from \"../Footer/footer\";\nimport { posturl } from \"../../api/api\";\n\nconst useStyle = makeStyles({\n  root: {\n    position:\"relative\",\n    left:\"158px\"\n  },\n  textField: {\n    width:\"50%\"\n  },\n  typo: {\n    position: \"relative\",\n    left: \"400px\"\n  }\n})\n\nexport const Header = () => {\n    const classes = useStyle();\n    const dispatch = useDispatch();\n    \n    const [text, setText] = useState('');\n    const id = useSelector(generateId);\n\n   \n\n   \n    \n    const changeHandler = (e) => {\n        setText(e.target.value);\n    }\n    \n    // const handleRemoveCompletedClick = () => {\n    //   dispatch(todoClearComplete());\n    // }\n\n\n  \n\n    \n\n    // const handleAllCompleteClick = () => {\n    //   dispatch(todoAllComplete())\n    // }\n\n\n\n\n\n    const handleKeyDown =  (e) => {\n        // If the user pressed the Enter key:\n        const trimmedText = text.trim()\n        if (e.which === 13 && trimmedText) {\n          // Dispatch add action creator function \n          dispatch(todoAdd(text));\n          // And clear out the text input\n          setText('')\n          \n        }\n      }\n\n\n      \n    return(\n    <div className={classes.root}>\n        <br/>\n        <Typography className={classes.typo} variant=\"h3\" color=\"#1376bd\">To Do Lists</Typography>\n    \n        <TextField className={classes.textField} id=\"standard-basic\" label=\"Please enter you want to do...\" variant=\"standard\" value={text} onChange={changeHandler} onKeyDown={handleKeyDown} />\n          \n        \n        <Typography style={{overflowWrap: 'break-word', width:\"50%\"}}>{text}</Typography>\n        \n        \n    </div>\n    )\n}\n\n"]},"metadata":{},"sourceType":"module"}