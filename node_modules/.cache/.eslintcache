[{"/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/index.js":"1","/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/App.js":"2","/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/serviceWorker.js":"3","/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/app/store.js":"4","/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/app/myMiddleWare.js":"5","/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/features/Todo/TodoList.js":"6","/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/features/Header/Header.js":"7","/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/features/Todo/todoSlice.js":"8","/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/features/Footer/footer.js":"9","/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/features/Filter/filterSlice.js":"10","/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/features/Footer/FilterColors.js":"11","/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/features/Todo/Todo.js":"12","/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/features/Footer/FilterStatus.js":"13","/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/api/api.js":"14","/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/components/SnackBar.jsx":"15","/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/features/Footer/ToggleButton.js":"16","/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/components/ConfirmDialog.jsx":"17"},{"size":697,"mtime":1647182359552,"results":"18","hashOfConfig":"19"},{"size":700,"mtime":1647182359548,"results":"20","hashOfConfig":"19"},{"size":5014,"mtime":1647182359552,"results":"21","hashOfConfig":"19"},{"size":409,"mtime":1647182359548,"results":"22","hashOfConfig":"19"},{"size":201,"mtime":1647182359548,"results":"23","hashOfConfig":"19"},{"size":2964,"mtime":1647182359548,"results":"24","hashOfConfig":"19"},{"size":1955,"mtime":1647182359548,"results":"25","hashOfConfig":"19"},{"size":6476,"mtime":1647182359552,"results":"26","hashOfConfig":"19"},{"size":1331,"mtime":1647182359548,"results":"27","hashOfConfig":"19"},{"size":1157,"mtime":1647182359548,"results":"28","hashOfConfig":"19"},{"size":966,"mtime":1647182359548,"results":"29","hashOfConfig":"19"},{"size":3593,"mtime":1647182359548,"results":"30","hashOfConfig":"19"},{"size":448,"mtime":1647182359548,"results":"31","hashOfConfig":"19"},{"size":1069,"mtime":1647193923388,"results":"32","hashOfConfig":"19"},{"size":742,"mtime":1647182359548,"results":"33","hashOfConfig":"19"},{"size":960,"mtime":1647182359548,"results":"34","hashOfConfig":"19"},{"size":1553,"mtime":1647182359548,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1rylpgq",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/index.js",[],[],"/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/App.js",["95"],[],"import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Header } from './features/Header/Header';\nimport { TodoList } from './features/Todo/TodoList';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport ScopedCssBaseline from '@mui/material/ScopedCssBaseline';\n\n\nimport './App.css'\nimport { fetchTodos } from './features/Todo/todoSlice';\nimport { Footer } from './features/Footer/footer'\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const theme = createTheme();\ndispatch(fetchTodos());\n  return (\n    <ThemeProvider theme={theme}>\n      \n      <Header/>\n      <TodoList/>\n      <Footer/>\n      \n    </ThemeProvider>\n  )\n}\n\nexport default App;\n","/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/serviceWorker.js",[],[],"/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/app/store.js",[],[],"/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/app/myMiddleWare.js",[],[],"/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/features/Todo/TodoList.js",["96","97","98","99","100","101"],[],"import { render } from \"@testing-library/react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useState } from \"react\";\nimport { Grid, Typography } from '@mui/material';\nimport Button from '@mui/material/Button';\nimport Paper from '@mui/material/Paper';\nimport Divider from '@mui/material/Divider';\n\nimport { Todo } from \"./Todo\";\nimport { selectTodoIds, selectFilterIds, todoAllComplete, todoClearComplete, todoAllUnComplete, selectTodoDeleteSnack, todoDeleteSnack } from \"./todoSlice\";\nimport { SnackBar } from \"../../components/SnackBar\";\n\nexport const TodoList = () => {\n   const todoIds = useSelector(selectFilterIds);\n\n   const [text, setText ] = useState(\"Mark All\");\n   const dispatch = useDispatch();\n   const openSnack = useSelector(selectTodoDeleteSnack);\n   const handleAllCompleteClick = () => {\n       if( text == \"Mark All\") {\n           dispatch(todoAllComplete());\n           setText(\"UnMark\")\n       } else {\n           dispatch(todoAllUnComplete());\n           setText(\"Mark All\")\n       }  \n   };\n\n   const handleClearCompletedClick = () => {\n       dispatch(todoClearComplete());\n   };\n\n\n   \n\n   const renderTodos = () => {\n    return todoIds.map(id => {\n       return (\n        <Grid item container >\n        <Todo id = {id} key = {id}/>\n        </Grid>\n       )\n    })\n   };\n   \n \n\n        return (\n           \n                \n                <Paper elevation={3} sx={{width:\"80%\", position:\"relative\", left:\"148px\", paddingTop:\"20px\",paddingBottom:\"20px\",margin:\"10px\",backgroundColor:\"#dff5e5\"}}>\n                    <Grid container direction='column' rowSpacing={2} >\n                        \n                        <Grid item container  justifyContent=\"left\" paddingLeft=\"50px\">\n                            \n                            <Grid item xs={1} lg={1}>\n                                <Button variant=\"contained\" size='small' onClick={handleAllCompleteClick}>{text}</Button>\n                            </Grid>\n                            \n                            <Grid item xs={1} lg={2}>\n                                <Button variant=\"contained\" size='small' onClick={handleClearCompletedClick}>Clear Completed</Button>\n                            </Grid>\n                        </Grid>\n                        \n                       \n                            {renderTodos()}\n                            <SnackBar\n                                color=\"black\"\n                                message=\"Success Deleted Item\"\n                                open={useSelector(selectTodoDeleteSnack)}\n                                autoHideDuration={4000}\n                                onClose={() => dispatch(todoDeleteSnack(false))}\n                                backgroundColor=\"green\"\n                            />\n                        \n                        \n                        \n                    </Grid>\n                    \n                </Paper>\n            \n        )\n}","/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/features/Header/Header.js",["102","103","104","105","106"],[],"import { useState } from \"react\";\nimport { useDispatch,useSelector } from \"react-redux\";\nimport { Grid, Typography } from '@mui/material';\nimport TextField from '@mui/material/TextField';\nimport { makeStyles } from \"@mui/styles\";\n\nimport { generateId, selectById } from \"../Todo/todoSlice\";\nimport { todoAdd } from \"../Todo/todoSlice\";\nimport { Footer } from \"../Footer/footer\";\nimport { posturl } from \"../../api/api\";\n\nconst useStyle = makeStyles({\n  root: {\n    position:\"relative\",\n    left:\"158px\"\n  },\n  textField: {\n    width:\"50%\"\n  },\n  typo: {\n    position: \"relative\",\n    left: \"400px\"\n  }\n})\n\nexport const Header = () => {\n    const classes = useStyle();\n    const dispatch = useDispatch();\n    \n    const [text, setText] = useState('');\n    const id = useSelector(generateId);\n\n   \n\n   \n    \n    const changeHandler = (e) => {\n        setText(e.target.value);\n    }\n    \n    // const handleRemoveCompletedClick = () => {\n    //   dispatch(todoClearComplete());\n    // }\n\n\n  \n\n    \n\n    // const handleAllCompleteClick = () => {\n    //   dispatch(todoAllComplete())\n    // }\n\n\n\n\n\n    const handleKeyDown =  (e) => {\n        // If the user pressed the Enter key:\n        const trimmedText = text.trim()\n        if (e.which === 13 && trimmedText) {\n          // Dispatch add action creator function \n          dispatch(todoAdd(text));\n          // And clear out the text input\n          setText('')\n          \n        }\n      }\n\n\n      \n    return(\n    <div className={classes.root}>\n        <br/>\n        <Typography className={classes.typo} variant=\"h3\" color=\"#1376bd\">To Do Lists</Typography>\n    \n        <TextField className={classes.textField} id=\"standard-basic\" label=\"Please enter you want to do...\" variant=\"standard\" value={text} onChange={changeHandler} onKeyDown={handleKeyDown} />\n          \n        \n        <Typography style={{overflowWrap: 'break-word', width:\"50%\"}}>{text}</Typography>\n        \n        \n    </div>\n    )\n}\n\n","/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/features/Todo/todoSlice.js",[],[],"/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/features/Footer/footer.js",["107","108","109","110","111","112"],[],"import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Grid, Typography } from '@mui/material';\nimport Paper from '@mui/material/Paper';\nimport { makeStyles } from \"@mui/styles\";\n\n\nimport { todoAllComplete, todoAllUnComplete, todoClearComplete, selectUnComplete } from \"../Todo/todoSlice\";\nimport { FilterColors } from \"./FilterColors\";\nimport { StatusButtons } from \"./FilterStatus\";\n\nconst useStyle = makeStyles({\n    root: {\n        position: \"relative\",\n        left:\"158px\",\n        width:\"80%\",\n        paddingTop: \"40px\",\n        paddingBottom: \"40px\",\n        backgroundColor:\"#dff5e5 !important\"\n    }\n})\n\nexport const Footer = () => {\n    const classes = useStyle();\n    const totoalUncomplete = useSelector(selectUnComplete).length;\n\n    return(\n        <Paper className={classes.root}>\n        <Grid item container sx={{backgroundColor:\"#dff5e5\"}}>\n            \n            <Grid item lg={1}/>\n            <Grid item lg={4}>\n                <StatusButtons/>\n            </Grid>\n            \n           <Grid item lg={3}>\n                <h3>Total Uncomplete</h3>\n                <label>{totoalUncomplete}</label>\n           </Grid>\n            \n           <Grid item lg={2}>\n                <FilterColors/>\n           </Grid>\n        </Grid>\n        </Paper>\n        \n    )\n}","/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/features/Filter/filterSlice.js",["113"],[],"import { createSelector, createSlice } from \"@reduxjs/toolkit\";\n\nexport const colors = ['blue','orange','yellow','green','red'];\n\nexport const capatalize = (word) => {\n   if(word != null | word != undefined) {\n      const str = word.charAt(0).toUpperCase();\n      return str.concat(word.slice(1))   \n   }\n   \n}\n\n\nexport const status = {\n   all: \"All\",\n   active: \"UnComplete\",\n   complete: \"Complete\",\n\n}\n\nconst initialState = {\n   status: status.all,\n   colors: [],\n}\n\nconst filterSlice = createSlice({\n   name: 'filters',\n   initialState,\n   reducers: {\n      statusChange: (state, action) => {\n         state.status = action.payload;\n      },\n      colorChange: (state, action) => {\n         if(state.colors.includes(action.payload)) {\n            const index = state.colors.indexOf(action.payload);\n            state.colors.splice(index,1);\n         } else {\n            state.colors.push(action.payload);\n         }\n      },\n      \n      \n   }\n})\n\nexport const {statusChange, colorChange} = filterSlice.actions;\n\nexport default filterSlice.reducer;\n\n\nexport const selectStatus = createSelector(\n   (state) => state.filters,\n   state => state.status\n)\n\n","/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/features/Footer/FilterColors.js",[],[],"/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/features/Todo/Todo.js",["114","115","116","117","118","119","120","121"],[],"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport '@fontsource/roboto/400.css';\nimport { Grid, Typography } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport NativeSelect from '@mui/material/NativeSelect';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport IconButton from '@mui/material/IconButton';\nimport Tooltip from '@mui/material/Tooltip';\nimport Divider from '@mui/material/Divider';\n\n\n\nimport { selectById } from \"./todoSlice\"\nimport { todoComplete, todoSelect, todoDelete, selectTodoDeleteSnack, todoDeleteSnack } from \"./todoSlice\";\nimport { capatalize, colors } from \"../Filter/filterSlice\";\nimport { ConfirmDialog } from \"../../components/ConfirmDialog\"; \n\nimport { useEffect, useState } from \"react\";\n\n\nexport const Todo = (props) => {\nconst dispatch = useDispatch();\nconst TodoId = props.id;\nconst {_id, completed, description, color} = useSelector((state) => selectById(state,TodoId));\nconst [open, setOpen] = useState(false);\nconst [snackBarOpen, setSnackBarOpen] = useState(false);\n\n\nconst handleCheckOnChange = () => {\n\n    dispatch(todoComplete({_id:_id, changes:{completed: !completed}}));\n    \n  }\n\nconst colorOptions = (colors) => {\n    const arr = colors.map((c) => {\n        if(c != color) {\n            return <option value={c}>{capatalize(c)}</option>\n        }\n    })\n    if(color != \"\"){\n        arr.push(<option value={\"\"}></option>);\n    }\n    return arr;\n}\n\n\nconst handleDeleteClick = () => {\n    setOpen(true);\n    \n  }\n\nconst handleOnOk = () => {\n    dispatch(todoDelete(_id));\n   \n}\n\nconst handleColorOnChange = (e) => {\n    dispatch(todoSelect({_id: _id, changes: {color: e.target.value}}))\n\n\n  }\n    return (\n        <Grid container direction=\"column\">\n        <Grid item container alignItems=\"center\" wrap='nowrap' justifyContent=\"center\">\n            \n            <Grid item xs={1} lg={1}>\n            <Tooltip title=\"Complete\">\n            <Checkbox\n            checked={completed}\n            onChange={handleCheckOnChange}\n            inputProps={{ 'aria-label': 'controlled' }}\n            size='small'\n            />\n            </Tooltip>\n            </Grid>\n            <Grid item xs={8} lg={7} zeroMinWidth >\n            <Typography fontSize={25} style={{overflowWrap: 'break-word'}}>{description}</Typography>\n           \n            </Grid>\n            <Grid item xs={2} lg={1} >\n            <FormControl >\n                \n                <NativeSelect\n                    defaultValue={30}\n                    inputProps={{\n                    name: 'colors',\n                    id: 'uncontrolled-native',\n                    }} \n                    onChange={handleColorOnChange}\n                    size='20'\n                >\n                    <option>{capatalize(color)}</option>\n                    {colorOptions(colors)}\n                </NativeSelect>\n            </FormControl>\n            </Grid>\n            <Grid item xs={1} lg={1}>\n            <Tooltip title=\"Delete\">\n                <IconButton onClick={handleDeleteClick}>\n                    <DeleteIcon color=\"primary\"/>\n                </IconButton>\n            </Tooltip>\n            </Grid>\n            \n            <Grid item lg={1}>\n                <ConfirmDialog \n                    open={open} \n                    onClose={() => setOpen(false)} \n                    onOk = {handleOnOk}\n                />\n                \n            </Grid>\n        </Grid>\n        <Grid item>\n            <Divider variant=\"inset\" />\n        </Grid>\n        </Grid> \n    \n    )\n}","/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/features/Footer/FilterStatus.js",["122","123","124","125","126","127"],[],"\nimport { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectStatus, status, statusChange } from \"../Filter/filterSlice\";\n\nimport { StatusToggleButton } from './ToggleButton'\n\nconst statusArray = Object.values(status);\n    \n\n\nexport const StatusButtons = () => {\n\n    \n\n    return(\n        <ul>\n            <h3>Status By Filters</h3>\n            \n            <StatusToggleButton/>\n        </ul>\n    )\n\n}","/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/api/api.js",[],[],"/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/components/SnackBar.jsx",[],[],"/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/features/Footer/ToggleButton.js",["128"],[],"import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ToggleButton from '@mui/material/ToggleButton';\nimport ToggleButtonGroup from '@mui/material/ToggleButtonGroup';\n\nimport { status, statusChange } from \"../Filter/filterSlice\";\n\n\nexport const StatusToggleButton = () => {\n  const [alignment, setAlignment] = useState('All');\n  \n  const statusArray = Object.values(status);\n \n  const dispatch = useDispatch();\n\n  const handleChange = (event, newAlignment) => {\n    setAlignment(newAlignment);\n    dispatch(statusChange(event.target.value));\n  };\n\n  const renderButton = (arr) => {\n    return arr.map((status) =>{\n       \n         return <ToggleButton value={status}>{status}</ToggleButton>\n        \n    } \n    )\n } \n\n\n  return (\n    <ToggleButtonGroup\n      color=\"primary\"\n      value={alignment}\n      exclusive\n      onChange={handleChange}\n    >\n      {renderButton(statusArray)}\n    </ToggleButtonGroup>\n  );\n}\n","/home/myo/Desktop/javascript/R_eact/to_do_lists/client/src/components/ConfirmDialog.jsx",[],[],{"ruleId":"129","severity":1,"message":"130","line":6,"column":8,"nodeType":"131","messageId":"132","endLine":6,"endColumn":25},{"ruleId":"129","severity":1,"message":"133","line":1,"column":10,"nodeType":"131","messageId":"132","endLine":1,"endColumn":16},{"ruleId":"129","severity":1,"message":"134","line":4,"column":16,"nodeType":"131","messageId":"132","endLine":4,"endColumn":26},{"ruleId":"129","severity":1,"message":"135","line":7,"column":8,"nodeType":"131","messageId":"132","endLine":7,"endColumn":15},{"ruleId":"129","severity":1,"message":"136","line":10,"column":10,"nodeType":"131","messageId":"132","endLine":10,"endColumn":23},{"ruleId":"129","severity":1,"message":"137","line":18,"column":10,"nodeType":"131","messageId":"132","endLine":18,"endColumn":19},{"ruleId":"138","severity":1,"message":"139","line":20,"column":17,"nodeType":"140","messageId":"141","endLine":20,"endColumn":19},{"ruleId":"129","severity":1,"message":"142","line":3,"column":10,"nodeType":"131","messageId":"132","endLine":3,"endColumn":14},{"ruleId":"129","severity":1,"message":"143","line":7,"column":22,"nodeType":"131","messageId":"132","endLine":7,"endColumn":32},{"ruleId":"129","severity":1,"message":"144","line":9,"column":10,"nodeType":"131","messageId":"132","endLine":9,"endColumn":16},{"ruleId":"129","severity":1,"message":"145","line":10,"column":10,"nodeType":"131","messageId":"132","endLine":10,"endColumn":17},{"ruleId":"129","severity":1,"message":"146","line":31,"column":11,"nodeType":"131","messageId":"132","endLine":31,"endColumn":13},{"ruleId":"129","severity":1,"message":"147","line":1,"column":10,"nodeType":"131","messageId":"132","endLine":1,"endColumn":18},{"ruleId":"129","severity":1,"message":"148","line":2,"column":10,"nodeType":"131","messageId":"132","endLine":2,"endColumn":21},{"ruleId":"129","severity":1,"message":"134","line":3,"column":16,"nodeType":"131","messageId":"132","endLine":3,"endColumn":26},{"ruleId":"129","severity":1,"message":"149","line":8,"column":10,"nodeType":"131","messageId":"132","endLine":8,"endColumn":25},{"ruleId":"129","severity":1,"message":"150","line":8,"column":27,"nodeType":"131","messageId":"132","endLine":8,"endColumn":44},{"ruleId":"129","severity":1,"message":"151","line":8,"column":46,"nodeType":"131","messageId":"132","endLine":8,"endColumn":63},{"ruleId":"138","severity":1,"message":"152","line":6,"column":27,"nodeType":"140","messageId":"141","endLine":6,"endColumn":29},{"ruleId":"129","severity":1,"message":"153","line":16,"column":48,"nodeType":"131","messageId":"132","endLine":16,"endColumn":69},{"ruleId":"129","severity":1,"message":"154","line":16,"column":71,"nodeType":"131","messageId":"132","endLine":16,"endColumn":86},{"ruleId":"129","severity":1,"message":"155","line":20,"column":10,"nodeType":"131","messageId":"132","endLine":20,"endColumn":19},{"ruleId":"129","severity":1,"message":"156","line":28,"column":8,"nodeType":"131","messageId":"132","endLine":28,"endColumn":20},{"ruleId":"129","severity":1,"message":"157","line":28,"column":22,"nodeType":"131","messageId":"132","endLine":28,"endColumn":37},{"ruleId":"158","severity":1,"message":"159","line":38,"column":32,"nodeType":"160","messageId":"161","endLine":38,"endColumn":34},{"ruleId":"138","severity":1,"message":"152","line":39,"column":14,"nodeType":"140","messageId":"141","endLine":39,"endColumn":16},{"ruleId":"138","severity":1,"message":"152","line":43,"column":14,"nodeType":"140","messageId":"141","endLine":43,"endColumn":16},{"ruleId":"129","severity":1,"message":"147","line":2,"column":10,"nodeType":"131","messageId":"132","endLine":2,"endColumn":18},{"ruleId":"129","severity":1,"message":"148","line":3,"column":10,"nodeType":"131","messageId":"132","endLine":3,"endColumn":21},{"ruleId":"129","severity":1,"message":"162","line":3,"column":23,"nodeType":"131","messageId":"132","endLine":3,"endColumn":34},{"ruleId":"129","severity":1,"message":"163","line":4,"column":10,"nodeType":"131","messageId":"132","endLine":4,"endColumn":22},{"ruleId":"129","severity":1,"message":"164","line":4,"column":32,"nodeType":"131","messageId":"132","endLine":4,"endColumn":44},{"ruleId":"129","severity":1,"message":"165","line":8,"column":7,"nodeType":"131","messageId":"132","endLine":8,"endColumn":18},{"ruleId":"129","severity":1,"message":"162","line":2,"column":23,"nodeType":"131","messageId":"132","endLine":2,"endColumn":34},"no-unused-vars","'ScopedCssBaseline' is defined but never used.","Identifier","unusedVar","'render' is defined but never used.","'Typography' is defined but never used.","'Divider' is defined but never used.","'selectTodoIds' is defined but never used.","'openSnack' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Grid' is defined but never used.","'selectById' is defined but never used.","'Footer' is defined but never used.","'posturl' is defined but never used.","'id' is assigned a value but never used.","'useState' is defined but never used.","'useDispatch' is defined but never used.","'todoAllComplete' is defined but never used.","'todoAllUnComplete' is defined but never used.","'todoClearComplete' is defined but never used.","Expected '!==' and instead saw '!='.","'selectTodoDeleteSnack' is defined but never used.","'todoDeleteSnack' is defined but never used.","'useEffect' is defined but never used.","'snackBarOpen' is assigned a value but never used.","'setSnackBarOpen' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useSelector' is defined but never used.","'selectStatus' is defined but never used.","'statusChange' is defined but never used.","'statusArray' is assigned a value but never used."]